// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id    Int                @id @default(autoincrement())
  name  String             @unique @db.VarChar(255)
  posts CompaniesOnPosts[]
}

model Platform {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  siteLink  String   @db.VarChar(255)
  About     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(255)
  posts     TagsOnPosts[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Post {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  problemId        String             @db.VarChar(100)
  link             String             @db.VarChar(200)
  description      String             @db.Text
  difficulty       Int
  platform         Platform           @relation(fields: [platformId], references: [id])
  platformId       Int
  tags             TagsOnPosts[]
  solutions        Solution[]
  companies        CompaniesOnPosts[]
}

model Solution {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  description  String   @db.Text
  solutionPath String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  tags       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([postId, tagId])
}

model CompaniesOnPosts {
  posts      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  companies  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int
  assignedAt DateTime @default(now())

  @@id([postId, companyId])
}
